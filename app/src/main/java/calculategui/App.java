/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package calculategui;

import javafx.application.Application;
import javafx.geometry.Insets;
import javafx.scene.Scene;
import javafx.scene.control.*;
import javafx.scene.layout.VBox;
import javafx.stage.Stage;
import javafx.scene.paint.Color;

import java.io.*;
import java.math.BigDecimal;
import java.util.*;


public class App extends Application {
    private static final File STORAGE_FILE = new File("storage.txt");

    public static void main(String[] args) {
        launch(args);
    }

    @Override
    public void start(Stage primaryStage) throws IOException {
        TextField targetField = new TextField();
        ListView<BigDecimal> numbersList = new ListView<>();
        numbersList.setCellFactory(param -> new ListCell<BigDecimal>() {
            @Override
            protected void updateItem(BigDecimal item, boolean empty) {
                super.updateItem(item, empty);
    
                if (empty || item == null) {
                    setText(null);
                } else {
                    setText(getIndex() + 1 + ".  " + item);
                }
            }
        });
        TextField numberField = new TextField();
        Button addButton = new Button("Add");
        Button removeButton = new Button("Remove");
        Button calculateButton = new Button("Calculate");
        TextArea resultArea = new TextArea();
        load(targetField, numbersList);

        Label targetLabel = new Label("Target Number:");
        targetLabel.setTextFill(Color.WHITE);
        Label numbersListLabel = new Label("Total Numbers: " + numbersList.getItems().size());
        numbersListLabel.setTextFill(Color.WHITE);
        Label numberLabel = new Label("Add Number:");
        numberLabel.setTextFill(Color.WHITE);

        addButton.setOnAction(e -> {
            try {
                BigDecimal number = new BigDecimal(numberField.getText());
                numbersList.getItems().add(number);
                numberField.clear();
                save(targetField, numbersList);
                numbersListLabel.setText("Total Numbers: " + numbersList.getItems().size());
            } catch (NumberFormatException | IOException ex) {
                // handle invalid input or IO error
            }
        });

        removeButton.setOnAction(e -> {
            BigDecimal selectedNumber = numbersList.getSelectionModel().getSelectedItem();
            numbersList.getItems().remove(selectedNumber);
            try {
                save(targetField, numbersList);
                numbersListLabel.setText("Total Numbers: " + numbersList.getItems().size());
            } catch (IOException ex) {
                // handle IO error
            }
        });

        calculateButton.setOnAction(e -> {
            try {
                BigDecimal target = new BigDecimal(targetField.getText());
                List<BigDecimal> numbers = new ArrayList<>(numbersList.getItems());
                String result = calculate(numbers, target);
                resultArea.setText(result);
            } catch (NumberFormatException ex) {
                // handle invalid input
            }
        });

        VBox vbox = new VBox(5, targetLabel, targetField, numbersListLabel, numbersList, numberLabel, numberField, addButton, removeButton, calculateButton, resultArea);
        vbox.setPadding(new Insets(10));

        Scene scene = new Scene(vbox, 500, 700);
        scene.getStylesheets().add(getClass().getResource("dark-theme.css").toExternalForm());
        
        primaryStage.setScene(scene);
        primaryStage.show();
    }

    private void load(TextField targetField, ListView<BigDecimal> numberList) throws IOException {
        if (!STORAGE_FILE.exists()) {
            return;
        }
        try (BufferedReader reader = new BufferedReader(new FileReader(STORAGE_FILE))) {
            targetField.setText(reader.readLine());
            String line;
            while ((line = reader.readLine()) != null) {
                numberList.getItems().add(new BigDecimal(line));
            }
        }
    }

    private void save(TextField targetField, ListView<BigDecimal> numberList) throws IOException {
        try (PrintWriter writer = new PrintWriter(new FileWriter(STORAGE_FILE))) {
            writer.println(targetField.getText());
            for (BigDecimal number : numberList.getItems()) {
                writer.println(number);
            }
        }
    }

    private String calculate(List<BigDecimal> numbers, BigDecimal target) {
        int targetInt = target.multiply(new BigDecimal("100")).intValue();
        int[] minUniqueCount = new int[targetInt + 1];
        List<Map<BigDecimal, Integer>> combinations = new ArrayList<>();
        for (int i = 0; i <= targetInt; i++) {
            minUniqueCount[i] = Integer.MAX_VALUE;
            combinations.add(new HashMap<>());
        }
        minUniqueCount[0] = 0;

        for (BigDecimal number : numbers) {
            int numberInt = number.multiply(new BigDecimal("100")).intValue();
            for (int i = numberInt; i <= targetInt; i++) {
                if (minUniqueCount[i - numberInt] != Integer.MAX_VALUE && 
                    minUniqueCount[i - numberInt] + (combinations.get(i - numberInt).containsKey(number) ? 0 : 1) < minUniqueCount[i]) {
                    minUniqueCount[i] = minUniqueCount[i - numberInt] + (combinations.get(i - numberInt).containsKey(number) ? 0 : 1);
                    Map<BigDecimal, Integer> newCombination = new HashMap<>(combinations.get(i - numberInt));
                    newCombination.put(number, newCombination.getOrDefault(number, 0) + 1);
                    combinations.set(i, newCombination);
                }
            }
        }

        if (minUniqueCount[targetInt] == Integer.MAX_VALUE) {
            return "No combination can sum to the target";
        } else {
            StringBuilder result = new StringBuilder("Minimum count of unique numbers: " + minUniqueCount[targetInt] + "\nSolution found:\n");
            Map<BigDecimal, Integer> combination = combinations.get(targetInt);
            for (Map.Entry<BigDecimal, Integer> entry : combination.entrySet()) {
                result.append(entry.getKey()).append(" used ").append(entry.getValue()).append(" times\n");
            }
            return result.toString();
        }
    }
}
